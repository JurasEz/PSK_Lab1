package lt.vu.mybatis.model;

import java.util.ArrayList;
import java.util.List;

public class GroupTableExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public GroupTableExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameIsNull() {
            addCriterion("DISCIPLINE is null");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameIsNotNull() {
            addCriterion("DISCIPLINE is not null");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameEqualTo(String value) {
            addCriterion("DISCIPLINE =", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameNotEqualTo(String value) {
            addCriterion("DISCIPLINE <>", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameGreaterThan(String value) {
            addCriterion("DISCIPLINE >", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameGreaterThanOrEqualTo(String value) {
            addCriterion("DISCIPLINE >=", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameLessThan(String value) {
            addCriterion("DISCIPLINE <", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameLessThanOrEqualTo(String value) {
            addCriterion("DISCIPLINE <=", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameLike(String value) {
            addCriterion("DISCIPLINE like", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameNotLike(String value) {
            addCriterion("DISCIPLINE not like", value, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameIn(List<String> values) {
            addCriterion("DISCIPLINE in", values, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameNotIn(List<String> values) {
            addCriterion("DISCIPLINE not in", values, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameBetween(String value1, String value2) {
            addCriterion("DISCIPLINE between", value1, value2, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andDisciplineNameNotBetween(String value1, String value2) {
            addCriterion("DISCIPLINE not between", value1, value2, "disciplineName");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberIsNull() {
            addCriterion("SEMESTER is null");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberIsNotNull() {
            addCriterion("SEMESTER is not null");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberEqualTo(Integer value) {
            addCriterion("SEMESTER =", value, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberNotEqualTo(Integer value) {
            addCriterion("SEMESTER <>", value, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberGreaterThan(Integer value) {
            addCriterion("SEMESTER >", value, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberGreaterThanOrEqualTo(Integer value) {
            addCriterion("SEMESTER >=", value, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberLessThan(Integer value) {
            addCriterion("SEMESTER <", value, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberLessThanOrEqualTo(Integer value) {
            addCriterion("SEMESTER <=", value, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberIn(List<Integer> values) {
            addCriterion("SEMESTER in", values, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberNotIn(List<Integer> values) {
            addCriterion("SEMESTER not in", values, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberBetween(Integer value1, Integer value2) {
            addCriterion("SEMESTER between", value1, value2, "semesterNumber");
            return (Criteria) this;
        }

        public Criteria andSemesterNumberNotBetween(Integer value1, Integer value2) {
            addCriterion("SEMESTER not between", value1, value2, "semesterNumber");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated do_not_delete_during_merge Sun Mar 30 13:41:02 EEST 2025
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PUBLIC.GROUP_TABLE
     *
     * @mbg.generated Sun Mar 30 13:41:02 EEST 2025
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}